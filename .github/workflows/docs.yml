name: Build Documentation

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'      # build on semver tags
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  docs:
    name: Build Docs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0          # required so SMV sees history
          fetch-tags: true        # fetch tags too

      - name: Ensure tags and local main exist
        shell: bash
        run: |
          set -euxo pipefail
          git fetch origin --tags --prune
          git fetch origin main            # ensure origin/main exists
          # create a local main branch IF missing (avoid fetching into checked-out branch)
          if ! git show-ref --verify --quiet refs/heads/main; then
            git branch main origin/main
          fi
          git branch -a
          git tag --list

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10.6"

      - name: Install project with [docs] extras
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e ".[docs]"

      # Select refs: main + latest N semver tags (adjust N below)
      - name: Select versions to build (main + latest N tags)
        env:
          LATEST_N: 2
        shell: bash
        run: |
          set -euxo pipefail
          TAGS=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n ${LATEST_N} || true)
          if [ -n "${TAGS}" ]; then
            REGEX="^($(echo ${TAGS} | tr ' ' '|'))$"
          else
            REGEX="^$"
          fi
          echo "SMV_BRANCH_WHITELIST=^(main)$" >> $GITHUB_ENV
          echo "SMV_TAG_WHITELIST=${REGEX}"     >> $GITHUB_ENV

      - name: Build Multi-Version HTML
        run: |
          sphinx-multiversion docs docs/_build/html

      - name: Generate switcher.json
        run: |
          python - << 'PY'
          import json, pathlib, re, os
          repo = os.environ.get("GITHUB_REPOSITORY","").split("/")[-1]
          root = pathlib.Path("docs/_build/html")
          vers = sorted([p.name for p in root.iterdir()
                         if p.is_dir_
